var searchIndex = new Map(JSON.parse('[\
["mysha",{"doc":"A library crate that provides different cryptography tools …","t":"PPGNNCNNNNNNCNNNNNFPGPPPPPFPPGPPFFPFPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOPPPPPFGPGPPPPPPPPNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNN","n":["Ecc","Hash","MyshaError","borrow","borrow_mut","ecc","fmt","fmt","from","from","from","into","sha256","to_string","try_from","try_into","type_id","vzip","Curve","DivisionByZero","EccError","GeneratorNotOnCurve","GeneratorOnInfinity","InvalidOrderN","InvalidPrivateKey","InvalidSignature","KeyPair","NotOnCurve","NotPrime","Point","Point","PointAtInfinity","PrivKey","PubKey","PublicKeyOnInfinity","Signature","SingularCurve","add","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","double","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_private","get_a","get_b","get_curve","get_curve","get_curve","get_curve","get_g","get_n","get_p","get_private","get_private","get_public","get_public","get_public","get_r","get_s","get_x","get_xy","get_y","into","into","into","into","into","into","into","is_on_curve","multiply","new","new","new","new","new","point","private","public","secp256k1","sign","sign","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","verify","vzip","vzip","vzip","vzip","vzip","vzip","vzip","x","y","Binary","Decimal","DecimalTooBig","ErrorWithFile","File","Hash256","HashError","Hex","InputType","InvalidBinary","InvalidDecimal","InvalidHash","InvalidHex","LeBinary","LeHex","NotWholeBytes","Text","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","eq","fmt","fmt","fmt","fmt","from","from","from","from_hex","get_hex","get_hex_le","into","into","into","sha256","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip"],"q":[[0,"mysha"],[18,"mysha::ecc"],[145,"mysha::ecc::Point"],[147,"mysha::sha256"],[202,"core::fmt"],[203,"core::fmt"],[204,"core::result"],[205,"core::any"],[206,"num_bigint::biguint"],[207,"core::option"],[208,"num_bigint::bigint"],[209,"core::convert"]],"d":["","","Error type for this library","","","Module for performing elliptic curve cryptography …","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Module for hashing with sha256 algorithm","","","","","","Elliptic Curve type","Happens when a divions by 0 is attempted. Shouldn’t …","The error type implemented for this module, with all …","Happens when there is an attemp to set the generator point …","Happens when there is an attempt to set the generator …","Happens when there is an attempt to create a curve with an …","Happens when the private key provided isn’t valid","Happens when the signature provided isn’t valid","Key Pair type ","Happens when the Point provided is not on the curve","Happens when either the modulo p, or the order n aren’t …","Point type","","","Private Key Type ","Public Key type","Happens when there is an attempt to create a public key …","Signature Type","Happens when attempting to create a singular curve.","Adds two points on the Curve","","","","","","","","","","","","","","","","","","","Doubles a Point on the Curve","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a new KeyPair from a PrivKey","Returns the value of the parameter “a”","Returns the value of the parameter “b”","Returns the Curve used to get the KeyPair.","Returns the curve containing the public key","Returns the Curve the private key refers to","Returns the curve","Returns the generator point","Returns the value of the parameter “n”","Returns the value of the parameter “p”","Returns the private key.","Returns the Private Key","Returns the public key.","Returns the public key","Returns the public key of the signer","Returns the r part of the signature","Returns the s part of the signature","Returns the x coordinate","Returns both x and y coordinates","Returns the y coordinate","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a bool value that indicates wether the point …","Multiples a Point with a scalar number, on the Curve","Creates a new Curve from the curve parameters","Creates a new KeyPair from a number as the private key, …","Creates a PubKey from a Point and a Curve","Creates a PrivKey from a private number and a Curve","Creates a Signature","An easier way to create a Point","Creates a PrivKey type from a KeyPair.","Creates a PubKey type from a KeyPair.","Returns a Curve with the secp256k1 specs","Signs a message using the KeyPair.","Signs a message using the PrivKey.","","","","","","","","","","","","","","","","","","","","","","","","","Verifies if the signature is valid for the message provided","","","","","","","","","","Treats the input as a binary value","Treats the input as a decimal value.","Happens when the type chosen is decimal and it is to big …","Can happen for various reasons, like error opening file, …","Treats the input as a file","The return type of the hashing process","The error type implemented for this module, with all …","Treats the input as a hexadecimal value","Enum used to define the input type provided to the sha256()…","Happens when the number provided can’t be interpreted as …","Happens when the number provided can’t be interpreted as …","Happens when trying to convert an invalid hex value to a …","Happens when the number provided can’t be interpreted as …","treats the input as a little endian binary value, inverse …","treats the input as a little endian hexadecimal value, …","Happens when the input type should be in little endian, …","Treats the input as an utf-8 text","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Creates a hash type from a hex value.","Returns the hex digest of the hash.","Returns the hex digest of the hash in little endian byte …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The hashing function using the sha256 algorithm","","","","","","","","","","","","","","",""],"i":[1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,4,0,4,4,4,4,4,0,4,4,0,10,10,0,0,4,0,4,9,4,10,9,13,14,15,16,4,10,9,13,14,15,16,10,9,10,9,9,10,4,4,10,9,13,14,15,16,4,10,9,13,14,15,16,13,9,9,13,14,15,16,9,9,9,13,15,13,14,16,16,16,10,10,10,4,10,9,13,14,15,16,9,9,9,13,14,15,16,10,13,13,9,13,15,10,9,4,4,10,9,13,14,15,16,4,10,9,13,14,15,16,4,10,9,13,14,15,16,16,4,10,9,13,14,15,16,25,25,23,23,5,5,23,0,0,23,0,5,5,5,5,23,23,5,23,23,24,5,23,24,5,24,24,24,24,24,5,5,23,24,5,24,24,24,23,24,5,0,24,24,5,23,24,5,23,24,5,23,24,5,23,24,5],"f":[0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],0,[[1,2],3],[[1,2],3],[-1,-1,[]],[4,1],[5,1],[-1,-2,[],[]],0,[-1,6,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[9,10,10],[[7,[10,4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[10,10],[9,9],[[-1,-2],11,[],[]],[[-1,-2],11,[],[]],[[9,10],[[7,[10,4]]]],[[10,10],12],[[4,2],3],[[4,2],3],[[10,2],3],[[9,2],3],[[13,2],3],[[14,2],3],[[15,2],3],[[16,2],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[15,[[7,[13,4]]]],[9,17],[9,17],[13,9],[14,9],[15,9],[16,9],[9,10],[9,18],[9,18],[13,18],[15,18],[13,10],[14,10],[16,10],[16,18],[16,18],[10,[[19,[18]]]],[10,[[19,[[11,[18,18]]]]]],[10,[[19,[18]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[9,10],12],[[9,10,-1],[[7,[10,4]]],[[21,[20]]]],[[17,17,-1,-1,10],[[7,[9,4]]],[[21,[20]],[21,[18]]]],[[-1,9],[[7,[13,4]]],[[21,[20]],[21,[18]]]],[[10,9],[[7,[14,4]]]],[[-1,9],[[7,[15,4]]],[[21,[18]]]],[[-1,-1,9,10],16,[[21,[18]]]],[[-1,-1],10,[[21,[18]]]],[13,15],[13,14],[[],9],[[13,22,23],[[7,[16,1]]]],[[15,22,23],[[7,[16,1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,6,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[[16,22,23],[[7,[12,1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[24,24],[[-1,-2],11,[],[]],[[24,24],12],[[24,2],3],[[24,2],3],[[5,2],3],[[5,2],3],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[22,12],[[7,[24,5]]]],[24,22],[24,6],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[22,23],[[7,[24,5]]]],[-1,-2,[],[]],[-1,6,[]],[-1,6,[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,[[7,[-2]]],[],[]],[-1,8,[]],[-1,8,[]],[-1,8,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[6,"MyshaError",0],[5,"Formatter",202],[8,"Result",202],[6,"EccError",18],[6,"HashError",147],[5,"String",203],[6,"Result",204],[5,"TypeId",205],[5,"Curve",18],[6,"Point",18],[1,"tuple"],[1,"bool"],[5,"KeyPair",18],[5,"PubKey",18],[5,"PrivKey",18],[5,"Signature",18],[1,"i32"],[5,"BigUint",206],[6,"Option",207],[5,"BigInt",208],[10,"Into",209],[1,"str"],[6,"InputType",147],[5,"Hash256",147],[15,"Point",145]],"b":[[6,"impl-Debug-for-MyshaError"],[7,"impl-Display-for-MyshaError"],[9,"impl-From%3CEccError%3E-for-MyshaError"],[10,"impl-From%3CHashError%3E-for-MyshaError"],[58,"impl-Debug-for-EccError"],[59,"impl-Display-for-EccError"],[173,"impl-Debug-for-Hash256"],[174,"impl-Display-for-Hash256"],[175,"impl-Display-for-HashError"],[176,"impl-Debug-for-HashError"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
